[ { "title": "Hijacking DLLs", "url": "/Cyber-Blog/posts/DLLHijacking/", "categories": "Tutorials", "tags": "techniques, windows", "date": "2023-11-14 00:00:00 +0100", "snippet": "OverviewHijacking DLLs has been a very common technique for defense evasion, persistence and privilege escalation on Windows machines. I’ll explain and demonstrate two popular techniques used in Windows-targeted malware: DLL Search Order Hijacking and DLL Side-Loading. They are considered to be sub-techniques of the “Hijack Execution Flow” technique (T1574) in the MITRE ATT&amp;amp;CK matrix and they are labeled as T1574.01 and T1574.02 respectively.On Linux machines, this translates to Dynamic Linker Hijacking (T1574.006) where an attacker would override the LD_PRELOAD environment variable. The same concept applies for macOS machines with the DYLD_INSERT_LIBRARIES environment variable.DLL Search Order HijackingAs its name suggests, this sub-technique requires the adversary to make use of the DLL search order mechanism to load malicious libraries carrying the same name as the requested libraries required by a program.According to Windows documentation, there exists a certain way in which Windows will look for DLLs and it depends on the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode. When its value is set to 1, SafeDllSearchMode will be enabled and the search order will the following: DLL Redirection. API sets. SxS manifest redirection. Loaded-module list. Known DLLs. Windows 11, version 21H2 (10.0; Build 22000), and later. The package dependency graph of the process. This is the application’s package plus any dependencies specified as &amp;lt;PackageDependency&amp;gt; in the &amp;lt;Dependencies&amp;gt; section of the application’s package manifest. Dependencies are searched in the order they appear in the manifest. The folder from which the application loaded. The system folder. Use the GetSystemDirectory function to retrieve the path of this folder. The 16-bit system folder. There’s no function that obtains the path of this folder, but it is searched. The Windows folder. Use the GetWindowsDirectory function to get the path of this folder. The current folder. The directories that are listed in the PATH environment variable. This doesn’t include the per-application path specified by the App Paths registry key. The App Paths key isn’t used when computing the DLL search path.When SafeDllSearchMode is set to 0 i.e. disabled, the current folder moves from position 11 to position 8.DLL Side-LoadingAccording to MITRE ATT&amp;amp;CK’s T1574.002 description: Rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s)Mandiant’s “DLL Side-loading &amp;amp; Hijacking” blog also states that: Dynamic-link library (DLL) side-loading occurs when Windows Side-by-Side (WinSxS) manifests are not explicit about the characteristics of DLLs being loaded by a program.Basic DemoFor this demo, we’ll take a simple executable and let it load our own DLL. Let’s start by writing a simple windows program in C (call it hello.c) that loads a dll (credits to ippsec). The program will use the LoadLibraryA() function (A for ANSI strings):// hello.c#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;windows.h&amp;gt;int main(int argc, char **argv){ // Load DLL HINSTANCE hDll = LoadLibraryA(TEXT(&quot;mydll.dll&quot;)); // Check if DLL was loaded if (hDll != NULL){ printf(&quot;DLL Loaded\\n&quot;); }else{ printf(&quot;DLL Not Found\\n&quot;); } return 0;}Next up, we write a DLL (call it mydll.c) with a DllMain() function which will mark the entry point (see Microsoft’s documentation for a detailed example):// mydll.c#include &amp;lt;windows.h&amp;gt;BOOL WINAPI DllMain( HINSTANCE hinstDLL, // handle to DLL module DWORD fdwReason, // reason for calling function LPVOID lpvReserved // reserved ){ // Perform actions based on the reason for calling. switch(fdwReason){ // When dll attaches to process case DLL_PROCESS_ATTACH: // Create a message box (windows popup) MessageBox( NULL, // Owner window &quot;Hello there&quot;, // Message &quot;Definitely not a malicious popup&quot;, // Title MB_OK // Type ); break; } return TRUE; // Successful DLL_PROCESS_ATTACH}Now, we compile the hello.c with mingw-gccmingw32-gcc.exe .\\hello.c -o hello.exeIf we try running hello.exe, we will get the DLL Not Found output. We can also inspect the DLL search order using ProcessMonitor:Figure 1: Process Monitor - Failed DLL LoadWe compile the mydll.c with mingw-gcc as well and use the -shared flag:mingw32-gcc.exe .\\mydll.c -o mydll.dll -sharedNote that we are placing both the executable and the dll in the same directoryIf we try running hello.exe again, we will get the DLL Loaded output. Now the output in ProcessMonitor is looking a lot different than before since the process was able to load the DLL:Figure 2: Process Monitor - Successful DLL LoadAnd here’s the message box:Figure 3: Message BoxYou might have figured it out by now that we could have placed our DLL anywhere in the directories that we’ve seen in Process Monitor which include the ones in the PATH environment variable.MitigationThere are a few ways to avoid such attacks including the following: Ensure DLL import paths are hardcorded / Avoid relative paths Confirm that the imported DLL exists and that its function are valid Use a WinSxS manifest Verify the DLL SignatureReferences https://attack.mitre.org/techniques/T1574/001 https://attack.mitre.org/techniques/T1574/002 https://www.youtube.com/watch?v=3eROsG_WNpE https://owasp.org/www-community/attacks/Binary_planting https://www.mandiant.com/resources/blog/abusing-dll-misconfigurations https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#standard-search-order-for-unpackaged-apps https://www.mandiant.com/resources/blog/abusing-dll-misconfigurations https://posts.specterops.io/automating-dll-hijack-discovery-81c4295904b0 https://learn.microsoft.com/en-us/windows/win32/dlls/dllmain https://www.mandiant.com/sites/default/files/2021-09/rpt-dll-sideloading.pdf" }, { "title": "njRAT", "url": "/Cyber-Blog/posts/NJRAT/", "categories": "Threat Intel, RAT", "tags": "malware, windows", "date": "2022-02-09 22:21:00 +0100", "snippet": "njRAT (aka Bladabindi, Njw0rm, LV) is a Remote Access Trojan (RAT) built on the .NET framework and targetted for Windows machines. It started appearing in 2012 and has recently become trending on the any.run trend page after RedLine Stealer. Links to the articles used are in the References section.OverviewAs you can probably tell from its name, njRAT is indeed a RAT which allows an attacker to gain full remote access to a victim’s machine. Apparently it has several “editions” (danger, golden, green, lime):Figure 1: njRAT editionsAnd perhaps even more editions/versions as it is still being used to this day.DistributionnjRAT is often dropped as an email attachement. Some versions of this trojan are able to spread through external hard drives by copying themselves on to the connected drives.Decompilation &amp;amp; BehaviorI decided to load up an njRAT (Lime Edition) sample in ILSpy inside an isolated Win10 VM. Luckily the njRAT sample I was using was very not obfuscated which made the reversing part much easier.There were quite a few strings that looked really suspicious especially since they were related to gathering information from the infected machine:get_Nameget_OSFullNameget_FullNameget_UserNameget_ProcessNameget_Jpegget_CapsLockSearchForCamCopyFromScreenget_PrimaryScreenGetVolumeInformationget_CtrlKeyDownget_ShiftKeyDownKeyloggerDeleteValueFromRegistryGetValueFromRegistrySaveValueOnRegisteryI found part of a cmd command in the UserString Heap section:cmd.exe /C Y /N /D Y /T1 &amp;amp; Del &quot;and also the website: musicnote.soundcast.me.What’s also interesting is that avicap32.dll is used. Apparently this dll would normally be used to capture videos from camera through Windows API.I decompiled two files Lime.Program.cs and Lime.Keylogger.cs which I will go through. I’ll start with Lime.Program.cs because it contains the entry point (main function) to the malware.Lime.Program.cs findingsGlobal VariablesFor starters, we find interesting static global variables in this program:public static string host = &quot;musicnote.soundcast.me&quot;;public static string port = &quot;91&quot;;public static string registryName = &quot;88169db1610442f489&quot;;public static string splitter = &quot;@!#&amp;amp;^%$&quot;;public static string victimName = &quot;SEVYWE9FUlJS&quot;;public static string version = &quot;0.7NC&quot;;public static Mutex stubMutex = null;public static FileInfo currentAssemblyFileInfo = new FileInfo(Application.ExecutablePath);public static Keylogger keylogger = null;public static bool isConnected = false;public static TcpClient tcpSocket = null;private static MemoryStream memoryStream = new MemoryStream();private static byte[] bytesArray = new byte[5121];private static string lastCapturedImage = &quot;&quot;;public static object currentPlugin = null;[CompilerGenerated]private static ParameterizedThreadStart _003C_003E9__CachedAnonymousMethodDelegate1;We have information related to the host domain, the port number, the registry name, the victim name, and objects such as Keylogger, TcpClient, Mutex, etc.Entry PointThe main function calls on Start() which behaves as follows: Creates a registry entry Creates two threads: First thread calls on Receive while the second thread calls on the keylogger function keylogger.WRK which starts logging the keystrokes Sends the foreground window title to the C2CleanupThis njRAT sample actually has an unistall function that removes itself from the victim’s machine.public static void Uninstall(){ try { Registry.CurrentUser.OpenSubKey(&quot;Software&quot;, writable: true).DeleteSubKeyTree(registryName); } catch{} try { Interaction.Shell(&quot;cmd.exe /C Y /N /D Y /T 1 &amp;amp; Del \\&quot;&quot; + currentAssemblyFileInfo.FullName + &quot;\\&quot;&quot;, (AppWinStyle)0, false, -1); } catch{} try { stubMutex.Close(); } catch{} Environment.Exit(0);}Lime.Keylogger.csThe keylogger code is fairly simple: The characters logged are encoded into unicode (I guess to support different keyboard languages). It checks if caps lock and shift key are active at the same time (interesting but kind of expected). Has a typo [TAP] instead of [TAB] (just funny)private string Fix(Keys k){ bool flag = keyboard.get_ShiftKeyDown(); if (keyboard.get_CapsLock()) { // caps lock nullifies the shift key flag = ((!flag) ? true : false); }// &amp;lt;-- trimmed --&amp;gt; switch (k) { case Keys.Return: break; case Keys.Tab: return &quot;[TAP]\\r\\n&quot;; default: if (flag) { return VKCodeToUnicode((uint)k).ToUpper(); } return VKCodeToUnicode((uint)k); } Logs the keys with the date, the process name and the process titleLogs += &quot;\\r\\n\\u0001&quot; + DateAndTime.get_Now().ToString(&quot;yy/MM/dd &quot;) + processById.ProcessName + &quot; &quot; + processById.MainWindowTitle + &quot;\\u0001\\r\\n&quot;;Conclusion &amp;amp; MITRE ATT&amp;amp;CK MatrixSince njRAT has been out for almost over a decade now, it is usually spotted by Windows Defender and other AVs. The fact that it is still being used out there is because it is being constantly updated to evade detection. Furthermore, it is also possible to detect the malware by monitoring network traffic as it tries to send user info to the C2 server.There exists a well documented entry for njRAT on the MITRE ATT&amp;amp;CK website which you can find in the links below:https://attack.mitre.org/software/S0385/https://mitre-attack.github.io/attack-navigator//#layerURL=https%3A%2F%2Fattack.mitre.org%2Fsoftware%2FS0385%2FS0385-enterprise-layer.jsonIOCsHashes: 76B5F9AA537F6D48961C685FF3E10C6B754218198ED2700CF256FCC64F1ADF9C AED8D380683187C2DABB790C84AB0FEC48F06D0849E23645520AC62EF89569E2 2b2b971a07eb7459a7899342dc113638d8ec5caf364bbfbfd434191f7d889d8c 3623db8890450965c2f81be1e1035d62ddb6714fa811788198fe3f4f91d47a4a f4a05645f2b4968db97ae260b8bdf441b114c9b7c50d06a931e162bdbc5a38f0 0e97651fb888abd6b54b84f8c45b740e5e060091ca9035d507d49518e29b246b db0dda1d32c52f3e4b2dafb4f815a0791b2336f2212c6bc5c3e9ae4ace3d934d bbb446074a8bc7bfd37af136e9d7b0f7508ce21b21e371a91afb55881fa689f0 e47c0b614d0c4f9614a176a83c80b760e495fd8d197b7adb613951e89adb47d0 72a2e61f62c90994278d4d356156a04b85f00eb5745c6e231cb0a36045d8f370 367f1670b9e3eefb9c13cc5886b85b495a88c218cdb1d7b953073c396a85532b 1ccc4e0fdb2e471a5c8e36d4cfae746d325b25116ae86eae817683aba141d7ef 341d91df0e2f9c5a83b38991eacc78730324a0a6b5467d8dcfe333628f65a1ab a9021056e13fa4900943cab8c13718e9b82a55c6605624acc89539d5f7446838 77b23820d1202a35dc4552f68a54c401cf49aa347e9fc0233e51fdfe433b8348 2537f94e1c1b632bfee7ca9e7177ad9f25fedee9d39b26f85faa67eae237d13d c09779db8d24ec638dac307df49e7d1819433b406731fe501b65eecd560d033b e7d784c671c8f62c542fdbe2f87a27983922a05f508a72855ad53bd249b261e9 b3f5e748c31dd8024183b04250c42f384fb2759ab41a483b5812e85e8728ebc3 34c716c30b7569beb2fa617b2ab0395d4861428250a3b14e03ada22e831d1144 a1c54946f80c7fa92d1b8ae08aca08808e9564dda6c2d38372389491d9f6d69f 8f672d868bc0b42c368a067f7bd31e7cc91c70b8986720edacdaa5c0256d2203IP addresses: 186.169.54.67 181.141.0.235 46.246.86.11 194.5.98.12 91.109.178.6 104.22.48.74 80.241.222.33 3.142.167.54 91.246.115.86 192.169.69.25 3.19.130.43 37.252.7.150 193.161.193.99 82.202.167.58 3.141.177.1 164.68.120.78 3.131.207.170 3.22.30.40 3.17.7.232 3.14.182.203Domains: jimdo-dolphin-static-assets-prod.freetls.fastly.net wins10.duckdns.org majul.com hjgjkghkjgfu.duckdns.org wrytrioag.duckdns.org bngeyur.duckdns.org fgfdshrt.duckdns.org reald27.duckdns.org m3z0f.ddns.net mnzhvu5b5dramvakbcujh36aymg.anondns.net lorixo666.sytes.net leenux.freemyip.com milla.publicvm.com 192-168-100-240.otmn.direct.quickconnect.to 192-168-100-240.otmn.direct.quickconnect.to static.leadpages.net visitor.reactful.com njxyro.ddns.net chidonsky.linkpc.net bobby123.ddns.netReferences https://blogs.vmware.com/security/2019/12/threat-analysis-unit-tau-threat-intelligence-notification-njrat.html https://getskout.com/cybersecurity-threat-advisory-0001-22-continued-log4j-scanning-activity/ https://blogs.blackberry.com/en/2021/08/threat-thursday-dont-let-njrat-take-your-cheddar https://www.bleepingcomputer.com/news/security/youtube-bitcoin-scams-pushing-the-njrat-backdoor-infostealer/ https://blog.talosintelligence.com/2021/08/rat-campaign-targets-latin-america.html https://www.proofpoint.com/us/threat-reference/remote-access-trojan https://attack.mitre.org/software/S0385/ https://any.run/malware-trends/njrat https://www.joesandbox.com/analysis/250899/0/lighthtml https://www.threatminer.org/_reports/2013/fta-1009—njrat-uncovered-1.pdf" }, { "title": "Forensics Virtual Lab with CAINE", "url": "/Cyber-Blog/posts/CAINELabSetup/", "categories": "Tutorials", "tags": "forensics", "date": "2022-02-05 00:00:00 +0100", "snippet": "I will be showcasing how to setup CAINE for a virtual Forensics lab. CAINE is a great tool for digital forensics as it comes pre-packaged with tools such as Autopsy and Volatility. Also I will do a quick demo following the training “Forensic Analysis: Network Incident Response” by ENISA (https://www.enisa.europa.eu/topics/trainings-for-cybersecurity-specialists/online-training-material/technical-operational/#Forensic_analysis_Network_Incident_Response).RequirementsFor this setup, you will need the following: CAINE iso (https://www.caine-live.net/) VirtualBox (https://www.virtualbox.org/) An evidence drive (Example: http://enisa.europa.eu/ftp/ENISA-Ex2-Evidence.vmdk)SetupYou don’t have to install CAINE since normally you would use it live but it’ll make things faster for exercises within a virtual environment.If you do install CAINE inside a VM then you may encounter a problem with GRUB. To fix the GRUB bootloader issue, please follow the tutorial at https://www.youtube.com/watch?v=atHr2OGCQiQ&amp;amp;t=1s&amp;amp;ab_channel=CyberEntiretyOther than that you should be able to boot up your CAINE VM with ease. You may want to change the display resolution to suit your screen. Alternatively, you can install the virtualbox guest additions which automatically adjusts the screen resolution for you.If you have installed CAINE, make sure you take a snapshot of your CAINE VM after your setup.DemoFor this demo I will be using an image from ENISA’s training website on “Forensic Analysis: Network Incident Response” (link provided in the Requirements)Preparing the evidence driveBefore booting up your CAINE VM, you need to add the evidence vmdk drive as a storage device in the CAINE VM settings.Figure 1: CAINE VM Storage SettingsBoot up and login to your CAINE VM. Next thing you’ll need to do is mount the evidence image. The safest way to mount an evidence drive is by using the Mounter utility in CAINE on the bottom right of the taskbar; this makes sure the device is mounted in read-only to avoid corrupting the drive.Figure 2: Evidence MountAlternatively, you can mount the connected drive through the commands:lsblk # to check if device is in sdb1 (it should be by default)sudo mount /dev/sdb1 Now that we have the evidence drive mounted, we’ll copy the pfsense and dhcpsrv directories to our CAINE VM.# Create empty directory cd ~/Desktop/mkdir forensic-demo &amp;amp;&amp;amp; cd forensic-demo# Copy directories to current directorycp -r /media/sdb1/pfsense ./cp -r /media/sdb1/dhcpsrv ./After this step, you can disconnect the mounted drive if you wish.Tip: If your VM is slow, you might want to try to ssh into it from your host machine.sudo apt-get install openssh-server # install ssh serversudo systemctl status sshd # Check status of ssh daemonConfigure SSH port forwarding in your virtual box network settings: Set the guest port to 22 and your host port to 2222 (or any other port that’s not in use).Collecting network evidenceIn the pfsense directory you will see 3 archives: log.tar.gz: firewall logs nfdump.tar.gz: netflow dump squid-logs.tar.gz: squid proxy logsWe will need to use nfdump to read the netflow dump. Install it with sudo apt-get install nfdump.Network forensic analysis: nfdumpWe are given that the system with IP 192.168.5.100 has been compromised. Using nfdump we will look for clues about the connections related to the victim IP.We’ll sort by number of flows with -O flows and filter with ip 192.168.5.100 and proto udp:$ nfdump -o long -R ./nfdump -A proto,dstport -O flows &#39;ip 192.168.5.100 and proto udp&#39; | headDate first seen Duration Proto Src IP Addr:Port Dst IP Addr:Port Flags Tos Packets Bytes Flows2016-08-16 11:43:05.180 43254.352 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:53 ...... 0 4406 289737 39702016-06-28 02:24:32.625 4307914.637 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:8572 ...... 0 496 47954 2342016-08-16 11:43:00.596 40562.491 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:5355 ...... 0 239 13582 1212016-06-27 20:54:55.360 4309508.877 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:3544 ...... 0 507 43359 632016-08-16 11:50:31.397 11653.753 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:1900 ...... 0 92 14766 462016-08-16 11:50:08.447 11791.646 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:3478 ...... 0 133 7448 302016-06-28 04:24:32.963 4300365.056 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:40018 ...... 0 87 15045 282016-08-16 11:49:32.177 40336.276 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:443 ...... 0 24 1104 242016-06-27 19:50:20.901 4327722.503 UDP 0.0.0.0:0 -&amp;gt; 0.0.0.0:137 ...... 0 415 34098 23The most udp packets are from DNS traffic (port 53). As for the other ports: 8572: Unassigned 5355: LLMNR service 3544: Teredo (RFC 4380) 1900: UPnP 3478: VoIP STUN 40018: Used by Microsoft 443: HTTPS 137: NetBIOSI used SpeedGuide as a reference for the ports.Nothing too suspicious so let’s check the TCP packets.$ nfdump -o long -R ./nfdump -A proto,dstport -O bytes &#39;ip 192.168.5.100 and proto tcp&#39; | headDate first seen Duration Proto Src IP Addr:Port Dst IP Addr:Port Flags Tos Packets Bytes Flows2016-06-27 20:08:32.485 4319017.104 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:12345 ...... 0 1.1 M 1.5 G 912016-06-27 23:02:11.313 4297677.538 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:22 ...... 0 75846 89.0 M 2502016-06-27 22:15:20.176 4294809.218 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:50087 ...... 0 25889 35.2 M 12016-06-27 21:08:52.091 4294720.356 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:59694 ...... 0 21598 29.1 M 12016-06-27 20:19:51.126 4301177.540 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:49964 ...... 0 15240 20.9 M 32016-06-27 22:15:39.248 4294701.500 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:50082 ...... 0 14692 20.2 M 12016-06-27 21:05:43.972 4294783.806 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:59628 ...... 0 14468 19.5 M 12016-06-28 00:37:49.495 4289492.757 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:58838 ...... 0 295049 12.5 M 12016-06-27 22:12:42.597 4294667.462 TCP 0.0.0.0:0 -&amp;gt; 0.0.0.0:50064 ...... 0 8330 11.3 M 1There’s a lot of traffic towards the unusual port 12345. Let’s see where this might lead us:$ nfdump -o long -R ./nfdump -A proto,srcip,dstip,dstport &#39;src ip 192.168.5.100 and proto tcp and dst port 12345&#39;Date first seen Duration Proto Src IP Addr:Port Dst IP Addr:Port Flags Tos Packets Bytes Flows2016-08-16 14:49:41.839 4194.136 TCP 192.168.5.100:0 -&amp;gt; 192.168.5.10:12345 ...... 0 2 92 22016-06-27 20:08:32.485 4319017.104 TCP 192.168.5.100:0 -&amp;gt; 36.98.102.89:12345 ...... 0 1.1 M 1.5 G 852016-08-16 14:49:44.104 4194.179 TCP 192.168.5.100:0 -&amp;gt; 192.168.5.15:12345 ...... 0 2 92 22016-08-16 15:59:31.538 0.115 TCP 192.168.5.100:0 -&amp;gt; 192.168.5.1:12345 ...... 0 2 92 2Summary: total flows: 91, total bytes: 1496690321, total packets: 1122052, avg bps: 2772, avg pps: 0, avg bpp: 1333Time window: 2016-06-27 02:18:14 - 2016-08-16 23:52:04Total flows processed: 50089, Blocks skipped: 0, Bytes read: 3719736Sys: 0.005s flows/second: 9987836.5 Wall: 0.003s flows/second: 16385018.0The address 36.98.102.89:12345 is the destination of the suspicious traffic.Now let’s investigate the traffic on the local network:$ nfdump -o long -R ./nfdump -A proto,srcip,dstip -O flows &#39;ip 192.168.5.100 and proto tcp and dst net 192.168.5.0/24&#39; | headDate first seen Duration Proto Src IP Addr:Port Dst IP Addr:Port Flags Tos Packets Bytes Flows2016-08-16 14:49:41.996 4207.123 TCP 192.168.5.100:0 -&amp;gt; 192.168.5.15:0 ...... 0 2824 129904 28242016-06-27 23:02:11.313 4297677.538 TCP 192.168.5.100:0 -&amp;gt; 192.168.5.10:0 ...... 0 78176 89.1 M 25722016-06-27 23:01:56.613 4297692.238 TCP 192.168.5.10:0 -&amp;gt; 192.168.5.100:0 ...... 0 48992 5.3 M 24082016-08-16 14:49:44.122 4189.718 TCP 192.168.5.100:0 -&amp;gt; 192.168.5.1:0 ...... 0 1893 87078 18932016-08-16 11:50:07.935 11798.417 TCP 208.73.211.70:0 -&amp;gt; 192.168.5.100:0 ...... 0 242 11132 1212016-06-27 19:56:31.305 4303049.443 TCP 54.229.228.176:0 -&amp;gt; 192.168.5.100:0 ...... 0 34081 46.2 M 1142016-06-27 20:08:32.485 4319017.104 TCP 36.98.102.89:0 -&amp;gt; 192.168.5.100:0 ...... 0 488224 45.0 M 842016-06-27 19:55:50.710 4313185.516 TCP 40.115.1.44:0 -&amp;gt; 192.168.5.100:0 ...... 0 850 489171 752016-06-27 21:00:14.196 4296132.010 TCP 93.184.220.239:0 -&amp;gt; 192.168.5.100:0 ...... 0 1679 1.6 M 61There is a lot of traffic going to the tree addresses 192.168.5.15, 192.168.5.10 and 192.168.5.100.$ nfdump -o long -R ./nfdump -A proto,srcip,dstip,dstport -O bytes &#39;ip 192.168.5.100 and proto tcp and dst net 192.168.5.0/24&#39; | headDate first seen Duration Proto Src IP Addr:Port Dst IP Addr:Port Flags Tos Packets Bytes Flows2016-06-27 23:02:11.313 4297677.538 TCP 192.168.5.100:0 -&amp;gt; 192.168.5.10:22 ...... 0 75840 89.0 M 2442016-06-27 22:15:20.176 4294809.218 TCP 13.107.4.50:0 -&amp;gt; 192.168.5.100:50087 ...... 0 25889 35.2 M 12016-06-27 21:08:52.091 4294720.356 TCP 13.107.4.50:0 -&amp;gt; 192.168.5.100:59694 ...... 0 21598 29.1 M 12016-06-27 20:19:51.126 4294440.801 TCP 54.229.228.176:0 -&amp;gt; 192.168.5.100:49964 ...... 0 15226 20.9 M 12016-06-27 22:15:39.248 4294701.500 TCP 54.229.228.176:0 -&amp;gt; 192.168.5.100:50082 ...... 0 14692 20.2 M 12016-06-27 21:05:43.972 4294783.806 TCP 13.107.4.50:0 -&amp;gt; 192.168.5.100:59628 ...... 0 14468 19.5 M 12016-06-28 00:37:49.495 4289492.757 TCP 36.98.102.89:0 -&amp;gt; 192.168.5.100:58838 ...... 0 295049 12.5 M 12016-06-27 22:12:42.597 4294667.462 TCP 13.107.4.50:0 -&amp;gt; 192.168.5.100:50064 ...... 0 8330 11.3 M 12016-06-27 22:01:12.808 4294888.784 TCP 13.107.4.50:0 -&amp;gt; 192.168.5.100:49913 ...... 0 7890 10.8 M 1We see that there is a lot of ssh packets going to 192.168.5.10.Let’s check the flows to other ports:marwan@marwan-caine:~/Desktop/forensic-demo/pfsense$ nfdump -o long -R ./nfdump -A proto,srcip,dstip,srcport -O flows &#39;ip 192.168.5.100 and proto tcp and dst net 192.168.5.0/24&#39; | head -O flows &#39;ip 192.168.5.100 and proto tcp and dst net 192.168.5.0/24&#39; | headDate first seen Duration Proto Src IP Addr:Port Dst IP Addr:Port Flags Tos Packets Bytes Flows2016-08-16 14:49:39.451 4196.709 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:0 ...... 0 1918 88228 19182016-08-16 14:49:41.996 4196.428 TCP 192.168.5.100:41476 -&amp;gt; 192.168.5.15:0 ...... 0 1702 78292 17022016-08-16 14:49:43.757 4205.362 TCP 192.168.5.100:41477 -&amp;gt; 192.168.5.15:0 ...... 0 1122 51612 11222016-08-16 15:59:30.431 3.409 TCP 192.168.5.100:39690 -&amp;gt; 192.168.5.1:0 ...... 0 946 43516 9462016-08-16 14:49:44.122 4189.609 TCP 192.168.5.100:39689 -&amp;gt; 192.168.5.1:0 ...... 0 944 43424 9442016-08-16 14:49:41.507 4194.926 TCP 192.168.5.100:62605 -&amp;gt; 192.168.5.10:0 ...... 0 410 18860 4102016-06-27 23:01:56.613 4297692.238 TCP 192.168.5.10:22 -&amp;gt; 192.168.5.100:0 ...... 0 46812 5.2 M 2442016-08-16 11:50:07.935 11798.417 TCP 208.73.211.70:80 -&amp;gt; 192.168.5.100:0 ...... 0 242 11132 1212016-06-27 19:56:31.305 4303049.443 TCP 54.229.228.176:80 -&amp;gt; 192.168.5.100:0 ...... 0 34081 46.2 M 114We notice flows from unusual ports (62604, 41476, 41477, …) on IP 192.168.5.100. There might be some network scanning involved here. Let’s look at the traffic from port 62604:$ nfdump -o long -R ./nfdump -O flows &#39;src ip 192.168.5.100 and src port 62604 and proto tcp and dst net 192.168.5.0/24&#39; | headDate first seen Duration Proto Src IP Addr:Port Dst IP Addr:Port Flags Tos Packets Bytes Flows2016-08-16 14:49:39.686 4194.296 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:135 ....S. 0 1 46 12016-08-16 14:50:10.198 4163.306 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:53 ....S. 0 1 46 12016-08-16 14:50:10.145 4163.300 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:22 ....S. 0 1 46 12016-08-16 14:50:10.360 4163.307 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:53 ....S. 0 1 46 12016-08-16 14:50:10.308 4163.300 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:22 ....S. 0 1 46 12016-08-16 15:59:36.160 0.000 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:1247 ....S. 0 1 46 12016-08-16 15:59:36.160 0.000 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:49156 ....S. 0 1 46 12016-08-16 15:59:36.159 0.000 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:106 ....S. 0 1 46 12016-08-16 15:59:36.159 0.000 TCP 192.168.5.100:62604 -&amp;gt; 192.168.5.10:2033 ....S. 0 1 46 1This indeed looks like a port scan as we’re seeing 1 packet going to common ports.Network forensic analysis: Squid ProxyThe Squid proxy files are big, especially the cache.log (692M), so it’s probably better to filter out “normal” traffic. For instance, requests to de.archive.ubuntu.com are likely to be associated with Ubuntu packages being downloaded. Same thing goes for opensuse, openSUSE and novell.com. We can write down filters in a file that can be passed to grep:$ cat filter.txtubuntu.comopensuseopenSUSEnovell.com$ grep -v access.log -F -f filter.txt1467994225.265 100 192.168.5.10 TCP_MISS/301 661 GET http://www.dfn-cert.de/index.html - HIER_DIRECT/193.174.13.92 text/html1467994225.371 96 192.168.5.10 TCP_TUNNEL/200 17744 CONNECT www.dfn-cert.de:443 - HIER_DIRECT/193.174.13.92 -1467998887.429 3 193.174.12.200 TCP_DENIED/403 3926 GET http://www.heise.de/ - HIER_NONE/- text/html1468234574.617 266 192.168.5.15 TCP_MISS/200 185310 GET http://www.heise.de/ - HIER_DIRECT/193.99.144.85 text/html1469198547.567 306 192.168.5.15 TCP_REFRESH_MODIFIED/200 181483 GET http://www.heise.de/ - HIER_DIRECT/193.99.144.85 text/html1471356766.997 43 192.168.5.10 TCP_MISS/503 4151 GET http://bl/? - HIER_NONE/- text/html1471356988.431 59783 192.168.5.10 TCP_MISS/503 4163 GET http://blog.mysportclub.ex/wp-content/uploads/hk/files/binaries-only.zip - HIER_DIRECT/54.229.228.176 text/html1471357647.942 60185 192.168.5.10 TCP_MISS/503 4143 GET http://54.229.228.176/wp-content/uploads/hk/files/binaries-only.zip - HIER_DIRECT/54.229.228.176 text/htmlThe GET request at the last line shows that binaries-only.zip file has been downloaded from 54.229.228.176 on Tue Aug 16 2016 16:27:27 GMT+0200 (Central European Summer Time) (converted UNIX time 1471357647.942).The cache.log doesn’t give us any additional information. Here is the updated the filter file if you want to look through the log:$ cat filter.txtubuntu.comopensuseopenSUSEnovell.comERRORStarting SquidSquid CacheCPU UsageMaximum Resident SizePage faultsService Name: squidFATALConclusionTo recap, we managed to spot a few suspicious activities when analysing the nfdump files: Extensive traffic to 36.98.102.89:12345 Extensive SSH traffic to 192.168.5.10 port scans (notably from 192.168.5.100:62604)And we’ve seen on the access.log that a file binaries-only.zip was downloaded from 54.229.228.176 on Tue Aug 16 2016 16:27:27 GMT+0200.I hope you found this tutorial and demo interesting. I have enjoyed reading through the ENISA’s toolset on Network Incident Response and trying out CAINE. Even though the documents on their website are outdated, they still remain quite useful for those interested in cybersecurity." }, { "title": "Malware Analysis Lab Setup", "url": "/Cyber-Blog/posts/MalwareLabSetup/", "categories": "Tutorials", "tags": "linux, windows", "date": "2022-01-27 00:00:00 +0100", "snippet": "This will be a basic tutorial on how to setup a malware analysis lab. Of course this isn’t the only way to do it and you might need to have a different setup depending on what you’re trying to achieve in your analysis. I will try to make things simple and explain each step.RequirementsFor this setup, you will need the following: VirtualBox (https://www.virtualbox.org/) REMnux VM (https://remnux.org/#distro) Win10 VM (https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/) ParrotOS VM (https://www.parrotsec.org/virtual/) enough RAM for running at least REMnux and one of the other VMsYou can also use ISO files instead of OVA files but they’re slower to setup as they require extra steps.Setup overviewWhat we’re trying to achieve is the following network setup:Figure 1: Network DiagramWe’ll only permit communication between the VMs in order to isolate the network.I recommend you take a snapshot of each of the VMs before starting the setup, especially for the windows VM since it expires in 30 days.Think of snapshots as save files in video games; you can always load them in case you make a mistake.Setting up Virtual Machines - ToolsFirst, keep the network adapter on the machines as NAT because we will have to fetch packages and download programs.REMnuxREMnux is a Ubuntu-based VM created by Lenny Zeltser and comes with malware analysis tools like Wireshark, Ghidra and so on.Normally, it should work out of the box. If you get an error message saying “Oh no! Something went wrong”, then I suggest you try the following:sudo apt-get update &amp;amp;&amp;amp; sudo apt-get dist-upgraderemnux upgraderebootWin10I recommend installing the following tools: Process hacker procdot Process Monitor (ProcMon) IDA Free Ghidra Windbg / x64dbg PEstudio Common File Format Explorer Wireshark Autoruns Python3 Sysinternal tools: strings, procdump, head, tail, grep. HxDOf course, you may want to use other tools depending on your use case. (You can install the tools from FireEye https://www.mandiant.com/resources/flare-vm-update)Take a snapshot after installing the tools to avoid re-installing them if you roll back to the initial snapshotParrotOSParrotOS comes with a lot of pentesting tools so you don’t need to install a lot of additional tools (again, depending on your use case).Setting up Virtual Machines - NetworkOnce you’ve had your tools installed, turn off all 3 VMs and change their network adapters to Host-only (it’s NAT by default).Double check that the host network in VirtualBox’s Host Network Manager is properly configured. Enabling the DHCP server would save you some time in the setup, otherwise you’ll have to manually type each machine’s IP in their corresponding network settings.Now you can boot up the VMs. You don’t necessarily need to have both ParrotOS and Win10 running at the same time, just run one of them alongside REMnux.REMnuxNow that the VM is up and running, open a terminal, run ifconfig and write down the machine’s IP. In my case it was 192.168.103.4. We will use this as the gateway and DNS server on the other machines.Win10You will need to modify the network adapter within windows. Go to Control Panel -&amp;gt; Network and Internet -&amp;gt; Network Sharing Center -&amp;gt; Change adapter settings. You will see Ethernet there, right-click and go to Properties.Select Internet Protocol Version 4 (TCP/IPv4) and then Properties. You should check the radio button Use the following IP address and set a valid IP address within the Host-only network range (in my case, I put 192.168.103.5). Set the default gateway and the DNS server to the REMnux IP, and then hit OK.Figure 2: Win10 Ethernet Adapter ConfigurationDouble check with ipconfig /all in cmd. You should see the same information you entered previously. Also you should be able to ping the REMnux machine by now:C:\\Users\\jdoe&amp;gt;ping 192.168.103.4Pinging 192.168.103.4 with 32 bytes of data:Reply from 192.168.103.4: bytes=32 time=1ms TTL=64Reply from 192.168.103.4: bytes=32 time=1ms TTL=64Ping statistics for 192.168.103.4: Packets: Sent = 2, Received = 2, Lost = 0 (0% loss),Approximate round trip times in milli-seconds: Minimum = 1ms, Maximum = 1ms, Average = 1msControl-C^CFor the REMnux VM to be able to ping the Win10 VM, you will need to disable the firewall: Control Panel -&amp;gt; System and Security -&amp;gt; Windows Defender Firewall -&amp;gt; Turn Windows Defender Firewall on or off -&amp;gt; Turn off for private and public networks.ParrotOSGo to System -&amp;gt; Preferences -&amp;gt; Internet and Network -&amp;gt; Advanced Network Configuration and then click on the wheel button. A new window pops up, go to the tab IPv4 Settings and select Manual as method.Manually Add a valid IP address (in my case 192.168.103.6) with mask 24 and gateway the REMnux IP. Don’t forget to also set the DNS server to the REMnux IP.Finally, disconnect from the Wired Connection 1 and reconnect.Figure 3: ParrotOS Ethernet ConfigurationAnd… you should be done. Both the ParrotOS and the REMnux VMs should be able to ping each other.ConclusionSo… what’s next? Get a malware sample and start analysing it on your VMs. Be careful to always run malware samples in an isolated environment on your virtual machines. REMnux is able to reply to a VM with accept-all-ips start enp0s3 which is helpful if a malware tries to test for a connection. Also, you might want to do static analysis before trying to run anything.Resources https://0x1.gitlab.io/security/Malware-Analysis-Tools-List/ https://www.nakivo.com/blog/virtualbox-network-setting-guide/ https://zeltser.com/ https://www.youtube.com/watch?v=20xYpxe8mBg https://www.youtube.com/watch?v=F1LE56QQ7iA https://blog.didierstevens.com/" }, { "title": "RedLine Stealer", "url": "/Cyber-Blog/posts/RedLineStealer/", "categories": "Threat Intel, Stealer", "tags": "malware, windows", "date": "2021-12-18 00:00:00 +0100", "snippet": "This is my first threat analysis report. I’ve picked the RedLine Stealer because it was gaining popularity in early 2020 and is still being widely spread in Dec 2021 (probably because of its continuous updates). There are already some articles about this malware and a decent amount of IOCs which I linked in the References.Figure 1: Redline Trend in any.runOverviewRedLine Stealer gathers browser credentials, cookies, system information, browser autocomplete information, crypto wallets, etc. from Windows machines. It’s been sold using a subscription-based model making it a Malware-as-a-Service (MaaS).Figure 2: RedLine Stealer Official Telegram account (Source: SOCRadar)DistributionRedLine hides under different formats including: Office PDF RAR and ZIP Executable files JavaScriptIt can be sent through different channels: email attachements, discord, malicious ads, cracked games, etc. Knowing that a lot of people are staying at home during the pandemic, it is not surprising to see this malware being sent through email attachements. The infostealer might also be used to drop other malware on the victim’s machine.BehaviorThere was a leaked cracked version of this malware in 2020 sitting in a github repository (at least for now). The repository contains a RedLine.MainPanel.exe.config file, which is the config file of the stealer dashboard in XML format. We notice the following: .NETFramework v4.6.2 Profile Settings (Attacker’s settings): Login, Password, Server IP Remote Client Settings (Victim’s settings): Passwords, Cookies, FTP, Files, CreditCards, AutofillsAlso there is a batch file with the command: netsh advfirewall firewall add rule name=&quot;RLS&quot; dir=in action=allow protocol=TCP localport=6677.This adds a rule to the firewall that enables TCP connections on port 6677.Looking at some samples in any.run, we see that it tries to grab the victim’s browser and VPN client data:C:\\Users\\admin\\AppData\\Local\\NordVPNC:\\Users\\admin\\AppData\\Local\\Chromium\\User Data\\C:\\Users\\admin\\AppData\\Local\\BraveSoftware\\Brave-Browser\\User Data\\...and also stealing cookies:C:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\qldyz51w.default\\cookies.sqliteC:\\Users\\admin\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies...This infostealer’s activities seem to vary a lot: In some cases RedLine is searching for specific programs on the victim’s machine. I’m guessing there is a RedLine builder with features that can be enabled to fit the malware user.Now what’s troublesome (but expected) is that RedLine is obfuscated. A de-obfuscated version from the Blackberry Research &amp;amp; Intelligence Team presents several features of this infostealer including reading vpn configuration.Figure 3: Reading username and password via NordVPN Config file (Source: Blackberry)It’s also important to note that RedLine tries to steal Instant Messenger credentials like Discord and Telegram but also credentials related to FTP clients (FileZilla and WinSCP) and the Steam client.Figure 4: Parsing the Steam Sentry File (.SSFN) to read the users credentials / authorization data (Source: Blackberry)Conclusion and MITRE ATT&amp;amp;CK MatrixRedLine is getting quite popular and is receiving more updates. The 2020 leaked version included fewer features than the samples I have encountered recently. Because of RedLine’s varieties, people should be careful of the files they are downloading on the internet. Unfortunately, the pandemic is making it easier for threat actors to be successful in their phishing campaigns. For a price ranging from 150$ to 800$, they are likely to get a good return on investment especially if they stumble uppon cryptowallets.Figure 5: RedLine MITRE ATT&amp;amp;CK MatrixIOCsHashes: 88A8CBAC4C313547D13F5265D874776174656ED3A1BCCB9937CD47067B7FE733 8C7DE80EB1CB5DCD3A9B180C1EA64E2477BBD992C0BE91768C4AAF66E781ED7B 1E899E9715679DACD49BCC56039CA51D3DAD675C5D3525148BC94D1864304178 04DD197044B9D4C84A86FB2E50FC3C0C3AC5B021AA1314B821D693FA60124465 5975E737584DDF2601C02E5918A79DAD7531DF0E13DCA922F0525F66BEC4B448 CA7B364E65865734982FD56028549C652FCE04D01E5EDE83CBDE0D65AF38A853 13E308B3865991B142C4B3BDED2016148FDA7CF46E5D50CCD95943B0428B07A1 13D8CC8A5865B0D100D406358B1F38D1D9722C3B0407278480FB607CDA9C4A61 851F5E3FC5AAD87C89AD31AFA6702EFD6D6BC409ADAF0CE3FF0E2D683DECD495 662BEB6357002F6E4911A0F5CFAFD4DFF12CD22F92932AE8543429E7CF189D2C BCD55CD12D6BFB1207100146D90DE34703387B88FC31C296507A368303D85797 9975AECF7AF009672998FE402E33CA1CBA676E24D3BA6D23E5F2E011D0A210EA F64EC8BDAAC8B86E522705EA9388EB30BE070520466EF58B5141932F910A9E3E 747C067409C614F5F526987561ECFB860D9913432E62FDF2622C61D92E9323DB A46877360915A0F6D9FF4A1CE935352E485333CA80A3C82ED83AE72BC92328C7 30EA2B66243B336C8C371B34D6588A3C5D08EB5EDA6334342C5164098D900A60 F98E925C1CCAB5E997E6E4E2349C4A31DCDFABEBBF267D1BBF7943F35F0D4B57 0C79CCEAF053CD034C8E6E4AE7BBC590EEB10C4A03C456C04D38AA0357F60E19 B23D8D32ED04AE5F2C4BE9CF88D08704C692E65756E26D5B31B87E049442D7E0 6958D4559B3BAE679946BC9AF076E82C41C1A71644AAB97121DDC6FBBD05E57FIP addresses: 185.82.202.246 (yabynennet.xyz) 2.58.149.82 5.206.227.27 185.215.113.29 185.215.113.39 94.140.112.131 (jastemyaynha.xyz) 172.67.75.172 (api.ip.sb) 92.255.85.131 23.202.231.167 193.150.103.37 45.129.99.59 3.129.187.220 3.142.167.4 65.108.69.168 159.69.246.184 95.143.178.139 2.57.90.16 99.83.154.118 3.142.129.56 171.245.160.159 3.22.30.40 62.182.156.182 193.161.193.99 62.182.156.181 185.255.134.22 91.245.226.16 45.9.20.52 185.215.113.50Domains: yabynennet.xyz jastemyaynha.xyz api.ip.sb neasanckenk.site bbardiergim.site jangeamele.xyz querahinor.xyz evaexpand.com fevertox.duckdns.org 4.tcp.ngrok.io joemclean.duckdns.org microsoftfixer.duckdns.org fevertoxs.duckdns.org adenere.duckdns.org www.linknhomkin.com hungaria-eon.eu baninternetfalabellia-digita-linea.click isns.net krupskaya.com m-onetrading-jp.com majul.com thuocnam.tk www.intercourierdelivery.services govvv.xyz tatreriash.xyz nariviqusir.xyzReferences https://malpedia.caad.fkie.fraunhofer.de/details/win.redline_stealer https://cyberint.com/blog/research/redline-stealer/ https://blog.cyble.com/2021/08/12/a-deep-dive-analysis-of-redline-stealer-malware/ https://socradar.io/what-is-redline-stealer-and-what-can-you-do-about-it/ https://any.run/malware-trends/redline https://labs.k7computing.com/index.php/redline-stealer-the-maas-info-stealer/ https://threatfox.abuse.ch/browse/malware/win.redline_stealer/ https://github.com/rootpencariilmu/Redlinestealer2020 https://blog.talosintelligence.com/2021/12/magnat-campaigns-use-malvertising-to.html https://www.proofpoint.com/us/blog/threat-insight/new-redline-stealer-distributed-using-coronavirus-themed-email-campaign https://blogs.blackberry.com/en/2021/07/threat-thursday-redline-infostealer" } ]
